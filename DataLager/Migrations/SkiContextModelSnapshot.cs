// <auto-generated />
using System;
using DataLager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLager.Migrations
{
    [DbContext(typeof(SkiContext))]
    partial class SkiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entiteterna.BokningsRadLogial", b =>
                {
                    b.Property<int>("BokningRadLogialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BokningRadLogialID"));

                    b.Property<int>("BokningID")
                        .HasColumnType("int");

                    b.Property<int>("LogialID")
                        .HasColumnType("int");

                    b.Property<DateTime>("slutTid")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startTid")
                        .HasColumnType("datetime2");

                    b.HasKey("BokningRadLogialID");

                    b.HasIndex("BokningID");

                    b.HasIndex("LogialID");

                    b.ToTable("bokningsRad");
                });

            modelBuilder.Entity("Entiteterna.BokningsRadSkidskola", b =>
                {
                    b.Property<int>("SkidskolaRadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkidskolaRadID"));

                    b.Property<int>("BokningID")
                        .HasColumnType("int");

                    b.Property<int>("BokningMottagareViewBokningID")
                        .HasColumnType("int");

                    b.Property<int>("SKidskolaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("slutTid")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startTid")
                        .HasColumnType("datetime2");

                    b.HasKey("SkidskolaRadID");

                    b.HasIndex("BokningMottagareViewBokningID");

                    b.HasIndex("SKidskolaID");

                    b.ToTable("BokningsRadSkidskola");
                });

            modelBuilder.Entity("Entiteterna.BokningsRadUtrustning", b =>
                {
                    b.Property<int>("UtrustningsRadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtrustningsRadID"));

                    b.Property<int>("BokningID")
                        .HasColumnType("int");

                    b.Property<int>("BokningMottagareViewBokningID")
                        .HasColumnType("int");

                    b.Property<int>("UtrustningID")
                        .HasColumnType("int");

                    b.Property<DateTime>("slutTid")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startTid")
                        .HasColumnType("datetime2");

                    b.HasKey("UtrustningsRadID");

                    b.HasIndex("BokningMottagareViewBokningID");

                    b.HasIndex("UtrustningID");

                    b.ToTable("BokningsRadUtrustning");
                });

            modelBuilder.Entity("Entiteterna.DateRange", b =>
                {
                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.ToTable("DateRange");
                });

            modelBuilder.Entity("Entiteterna.FöretagKund", b =>
                {
                    b.Property<int>("företagkundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("företagkundID"));

                    b.Property<float>("kreditGräns")
                        .HasColumnType("real");

                    b.Property<string>("namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("rabatt")
                        .HasColumnType("real");

                    b.HasKey("företagkundID");

                    b.ToTable("företagkunder");
                });

            modelBuilder.Entity("Entiteterna.KonferensBokningView", b =>
                {
                    b.Property<int>("KonferensBokningID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KonferensBokningID"));

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<int>("FöretagKundNrföretagkundID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UtlämningsDatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ÅterlämningsDatum")
                        .HasColumnType("datetime2");

                    b.HasKey("KonferensBokningID");

                    b.HasIndex("FöretagKundNrföretagkundID");

                    b.ToTable("konferensBokningar");
                });

            modelBuilder.Entity("Entiteterna.KonferensBokningsRad", b =>
                {
                    b.Property<int>("KonferensBokningRadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KonferensBokningRadID"));

                    b.Property<int>("KonferensBokningID")
                        .HasColumnType("int");

                    b.Property<int>("KonferenslokalID")
                        .HasColumnType("int");

                    b.Property<DateTime>("slutTid")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startTid")
                        .HasColumnType("datetime2");

                    b.HasKey("KonferensBokningRadID");

                    b.HasIndex("KonferensBokningID");

                    b.HasIndex("KonferenslokalID");

                    b.ToTable("KonferensBokningsRad");
                });

            modelBuilder.Entity("Entiteterna.Konferenslokal", b =>
                {
                    b.Property<int>("konferensID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("konferensID"));

                    b.Property<int?>("KonferensBokningViewKonferensBokningID")
                        .HasColumnType("int");

                    b.Property<string>("PrisPerDygnLokal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrisPerTimLokal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrisPerVeckaLokal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Typ")
                        .HasColumnType("int");

                    b.Property<string>("beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("storlek")
                        .HasColumnType("int");

                    b.Property<bool>("tillgänglig")
                        .HasColumnType("bit");

                    b.HasKey("konferensID");

                    b.HasIndex("KonferensBokningViewKonferensBokningID");

                    b.ToTable("konferenslokaler");
                });

            modelBuilder.Entity("Entiteterna.Kund", b =>
                {
                    b.Property<int>("kundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("kundID"));

                    b.Property<int>("faktureringsAddress")
                        .HasColumnType("int");

                    b.Property<float>("kreditGräns")
                        .HasColumnType("real");

                    b.Property<string>("namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("rabatt")
                        .HasColumnType("real");

                    b.HasKey("kundID");

                    b.ToTable("kunder");
                });

            modelBuilder.Entity("Entiteterna.Logial", b =>
                {
                    b.Property<int>("logiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("logiID"));

                    b.Property<string>("Dag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fresön")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriserPerVecka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sönfre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Typ")
                        .HasColumnType("int");

                    b.Property<string>("beskrivning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pris")
                        .HasColumnType("int");

                    b.Property<int>("storlek")
                        .HasColumnType("int");

                    b.Property<bool>("tillgänglig")
                        .HasColumnType("bit");

                    b.HasKey("logiID");

                    b.ToTable("logialer");
                });

            modelBuilder.Entity("Entiteterna.SkidShopView", b =>
                {
                    b.Property<int>("SkidshopBokningID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkidshopBokningID"));

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<int>("KundNrkundID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Sluttid")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTid")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalPris")
                        .HasColumnType("int");

                    b.HasKey("SkidshopBokningID");

                    b.HasIndex("KundNrkundID");

                    b.ToTable("skidshopbokningar");
                });

            modelBuilder.Entity("Entiteterna.SkidshopBokningsRadSkidskola", b =>
                {
                    b.Property<int>("RadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RadID"));

                    b.Property<int>("BokningSkidshopViewSkidshopBokningID")
                        .HasColumnType("int");

                    b.Property<int>("SKidskolaID")
                        .HasColumnType("int");

                    b.Property<int>("SkidshopBokningID")
                        .HasColumnType("int");

                    b.Property<DateTime>("slutTid")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startTid")
                        .HasColumnType("datetime2");

                    b.HasKey("RadID");

                    b.HasIndex("BokningSkidshopViewSkidshopBokningID");

                    b.HasIndex("SKidskolaID");

                    b.ToTable("SkidshopBokningsRadSkidskola");
                });

            modelBuilder.Entity("Entiteterna.SkidshopBokningsRadUtrustning", b =>
                {
                    b.Property<int>("RadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RadID"));

                    b.Property<int>("BokningSkidshopViewSkidshopBokningID")
                        .HasColumnType("int");

                    b.Property<int>("SkidshopBokningID")
                        .HasColumnType("int");

                    b.Property<int>("UtrusningsID")
                        .HasColumnType("int");

                    b.Property<DateTime>("slutTid")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startTid")
                        .HasColumnType("datetime2");

                    b.Property<int>("utrustningID")
                        .HasColumnType("int");

                    b.HasKey("RadID");

                    b.HasIndex("BokningSkidshopViewSkidshopBokningID");

                    b.HasIndex("utrustningID");

                    b.ToTable("SkidshopBokningsRadUtrustning");
                });

            modelBuilder.Entity("Entiteterna.Skidskola", b =>
                {
                    b.Property<int>("skolaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("skolaID"));

                    b.Property<int>("LärareID")
                        .HasColumnType("int");

                    b.Property<int>("Typ")
                        .HasColumnType("int");

                    b.Property<string>("dagar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pris")
                        .HasColumnType("int");

                    b.Property<bool>("tillgänglig")
                        .HasColumnType("bit");

                    b.HasKey("skolaID");

                    b.ToTable("lektioner");
                });

            modelBuilder.Entity("Entiteterna.TellefonMottagareView", b =>
                {
                    b.Property<int>("BokningID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BokningID"));

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<int>("KundNrkundID")
                        .HasColumnType("int");

                    b.Property<int>("TotalPris")
                        .HasColumnType("int");

                    b.Property<DateTime>("UtlämningsDatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ÅterlämningsDatum")
                        .HasColumnType("datetime2");

                    b.HasKey("BokningID");

                    b.HasIndex("KundNrkundID");

                    b.ToTable("bokningar");
                });

            modelBuilder.Entity("Entiteterna.Utrustning", b =>
                {
                    b.Property<int>("utrustningID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("utrustningID"));

                    b.Property<string>("AlpintPaket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlpintPjäxor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlpintSkidor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlpintStavar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hjälm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LängdPaket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LängdPjäxor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LängdSkidor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LängdStavar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NilaPulka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaketSnowbord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkorSnowbord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkoterLynx50")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Snowbord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Typ")
                        .HasColumnType("int");

                    b.Property<string>("benämning")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("utrustningID");

                    b.ToTable("utrustningar");
                });

            modelBuilder.Entity("Model.Anställd", b =>
                {
                    b.Property<int>("anställdID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("anställdID"));

                    b.Property<string>("Lösenord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("anställdID");

                    b.ToTable("anställda");
                });

            modelBuilder.Entity("Entiteterna.BokningsRadLogial", b =>
                {
                    b.HasOne("Entiteterna.TellefonMottagareView", "Bokning")
                        .WithMany("BookingRaderLogialer")
                        .HasForeignKey("BokningID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entiteterna.Logial", "Logial")
                        .WithMany("BookingRader")
                        .HasForeignKey("LogialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bokning");

                    b.Navigation("Logial");
                });

            modelBuilder.Entity("Entiteterna.BokningsRadSkidskola", b =>
                {
                    b.HasOne("Entiteterna.TellefonMottagareView", "BokningMottagareView")
                        .WithMany("BookingRaderLektioner")
                        .HasForeignKey("BokningMottagareViewBokningID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entiteterna.Skidskola", "Skidskola")
                        .WithMany("SkidshopBokningsRader")
                        .HasForeignKey("SKidskolaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BokningMottagareView");

                    b.Navigation("Skidskola");
                });

            modelBuilder.Entity("Entiteterna.BokningsRadUtrustning", b =>
                {
                    b.HasOne("Entiteterna.TellefonMottagareView", "BokningMottagareView")
                        .WithMany("BookingRaderUtrustningar")
                        .HasForeignKey("BokningMottagareViewBokningID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entiteterna.Utrustning", "Utrustning")
                        .WithMany("BokningsRader")
                        .HasForeignKey("UtrustningID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BokningMottagareView");

                    b.Navigation("Utrustning");
                });

            modelBuilder.Entity("Entiteterna.KonferensBokningView", b =>
                {
                    b.HasOne("Entiteterna.FöretagKund", "FöretagKundNr")
                        .WithMany("KonferensBokningar")
                        .HasForeignKey("FöretagKundNrföretagkundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FöretagKundNr");
                });

            modelBuilder.Entity("Entiteterna.KonferensBokningsRad", b =>
                {
                    b.HasOne("Entiteterna.KonferensBokningView", "KonferensBokningView")
                        .WithMany("KonferensBokingRader")
                        .HasForeignKey("KonferensBokningID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entiteterna.Konferenslokal", "Lokal")
                        .WithMany("BokningsRaderKonferens")
                        .HasForeignKey("KonferenslokalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KonferensBokningView");

                    b.Navigation("Lokal");
                });

            modelBuilder.Entity("Entiteterna.Konferenslokal", b =>
                {
                    b.HasOne("Entiteterna.KonferensBokningView", null)
                        .WithMany("Lokal")
                        .HasForeignKey("KonferensBokningViewKonferensBokningID");
                });

            modelBuilder.Entity("Entiteterna.SkidShopView", b =>
                {
                    b.HasOne("Entiteterna.Kund", "KundNr")
                        .WithMany()
                        .HasForeignKey("KundNrkundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KundNr");
                });

            modelBuilder.Entity("Entiteterna.SkidshopBokningsRadSkidskola", b =>
                {
                    b.HasOne("Entiteterna.SkidShopView", "BokningSkidshopView")
                        .WithMany("SkidshopBokningsRaderSkidskola")
                        .HasForeignKey("BokningSkidshopViewSkidshopBokningID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entiteterna.Skidskola", "Skidskola")
                        .WithMany("SkidshopRader")
                        .HasForeignKey("SKidskolaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BokningSkidshopView");

                    b.Navigation("Skidskola");
                });

            modelBuilder.Entity("Entiteterna.SkidshopBokningsRadUtrustning", b =>
                {
                    b.HasOne("Entiteterna.SkidShopView", "BokningSkidshopView")
                        .WithMany("SkidshopBokningsraderUtrustningar")
                        .HasForeignKey("BokningSkidshopViewSkidshopBokningID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entiteterna.Utrustning", "Utrustning")
                        .WithMany("SkidshopBokningsRader")
                        .HasForeignKey("utrustningID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BokningSkidshopView");

                    b.Navigation("Utrustning");
                });

            modelBuilder.Entity("Entiteterna.TellefonMottagareView", b =>
                {
                    b.HasOne("Entiteterna.Kund", "KundNr")
                        .WithMany()
                        .HasForeignKey("KundNrkundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KundNr");
                });

            modelBuilder.Entity("Entiteterna.FöretagKund", b =>
                {
                    b.Navigation("KonferensBokningar");
                });

            modelBuilder.Entity("Entiteterna.KonferensBokningView", b =>
                {
                    b.Navigation("KonferensBokingRader");

                    b.Navigation("Lokal");
                });

            modelBuilder.Entity("Entiteterna.Konferenslokal", b =>
                {
                    b.Navigation("BokningsRaderKonferens");
                });

            modelBuilder.Entity("Entiteterna.Logial", b =>
                {
                    b.Navigation("BookingRader");
                });

            modelBuilder.Entity("Entiteterna.SkidShopView", b =>
                {
                    b.Navigation("SkidshopBokningsRaderSkidskola");

                    b.Navigation("SkidshopBokningsraderUtrustningar");
                });

            modelBuilder.Entity("Entiteterna.Skidskola", b =>
                {
                    b.Navigation("SkidshopBokningsRader");

                    b.Navigation("SkidshopRader");
                });

            modelBuilder.Entity("Entiteterna.TellefonMottagareView", b =>
                {
                    b.Navigation("BookingRaderLektioner");

                    b.Navigation("BookingRaderLogialer");

                    b.Navigation("BookingRaderUtrustningar");
                });

            modelBuilder.Entity("Entiteterna.Utrustning", b =>
                {
                    b.Navigation("BokningsRader");

                    b.Navigation("SkidshopBokningsRader");
                });
#pragma warning restore 612, 618
        }
    }
}
